@page "/department"
<PageTitle>Department</PageTitle>

<RadzenButton Text="Create" Click="CreateClicked" Icon="add" ButtonStyle="Radzen.ButtonStyle.Primary" Size="Radzen.ButtonSize.Medium" Style="margin:10px;margin-left:0px;" />
<RadzenDataGrid AllowFiltering="true" AllowColumnResize="false"
                AllowAlternatingRows="false"
                AllowSorting="true"
                AllowMultiColumnSorting="true"
                PageSize="5"
                AllowPaging="true"
                ShowPagingSummary="true"
                FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive"
                Data="@departments"
                EmptyText="No department records at the moment"
                TItem="Department">
    <Columns>
        <RadzenDataGridColumn TItem="Department" Property="Id" Title="ID" Frozen="true" Width="160px" />
        <RadzenDataGridColumn TItem="Department" Property="DepartmentName" Title="Name" Width="160px" />
        <RadzenDataGridColumn Context="Department" 
                              Filterable="false"
                              Sortable="false"
                              Width="60px"
                              TextAlign="Radzen.TextAlign.Center"
                              Frozen="true"
                              FrozenPosition="Radzen.FrozenColumnPosition.Right"
                              Title="Actions">
            <Template Context="departments">
                <RadzenButton Icon="edit" ButtonStyle="Radzen.ButtonStyle.Primary" Variant="Radzen.Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@(args =>EditClicked(departments))">
                </RadzenButton>
                <RadzenButton Icon="delete" ButtonStyle="Radzen.ButtonStyle.Danger" Variant="Radzen.Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@(args => DeleteClicked(departments))">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>




@code {
    Department department = new();
    List<Department> departments = new();

    //get the list of departments
    private async Task GetDept() => departments = await dept.GetAsync();

    //call the method when page is initialized
    protected async override Task OnInitializedAsync()
    {
        await GetDept();
    }


    async Task Save()
    {
        try
        {
            if (string.IsNullOrEmpty(department.DepartmentName))
            {
                toastService.ShowError("Please supply all department details before proceeding.");
                return;
            }


            var response = new ServiceResponse(false, null!);
            if (department.Id > 0)
                response = await dept.UpdateAsync(department);
            else
                response = await dept.AddAsync(department);

            if (!response.Flag)
            {
                toastService.ShowError("An error occurred while saving department.");
                return;
            }
            else
            {
                DialogService1.Close();
                toastService.ShowSuccess($"Department details saved successfully.");
                await GetDept();
                department = new();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.ToString());
            return;
        }


    }


    private void EditClicked(Department inconDept)
    {
        department = inconDept;
        ShowInlineDialog();
    }


    private void CreateClicked()
    {
        department = new();
        ShowInlineDialog();
    }

    public int DeleteId { get; set; }
    private async Task DeleteClicked(Department department)
    {
        var response = await dept.DeleteAsync(department.Id);
        await GetDept();
        DeleteId = 0;
        StateHasChanged();
        toastService.ShowSuccess($"Department deleted successfully.");
    }


    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        toastService.ShowError($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }


      async Task ShowInlineDialog()
    {
    var result = await DialogService1.OpenAsync("Create Department", ds =>
    @<RadzenStack>
        <RadzenTemplateForm Name="DepartmentDialog" TItem="Department" Data=department Submit="Save" InvalidSubmit="OnInvalidSubmit">
            <RadzenStack>
                <RadzenFormField Text="DepartmentName" Variant="Variant.Outlined">
                    <ChildContent>
                        <RadzenTextBox Name="DepartmentName" @bind-Value=department.DepartmentName />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="DepartmentName" Text="Department name is required." />
                    </Helper>
                </RadzenFormField>
                <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
            </RadzenStack>
        </RadzenTemplateForm>
    </RadzenStack>);
    }
   
}
